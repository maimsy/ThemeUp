<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nokia.Music.Wp7</name>
    </assembly>
    <members>
        <member name="T:Nokia.Music.Phone.Commands.ArtistProductsCommand">
            <summary>
              Gets products by an artist.
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Commands.SearchCatalogCommand`1">
            <summary>
            Searches the Nokia Music Catalog
            </summary>
            <typeparam name="TReturnType">The type of the returned object.</typeparam>
        </member>
        <member name="T:Nokia.Music.Phone.Commands.MusicClientCommand`1">
            <summary>
            Defines the Music Client Command base class
            </summary>
            <typeparam name="TReturnType">The type of the returned object.</typeparam>
        </member>
        <member name="T:Nokia.Music.Phone.Commands.MusicClientCommand">
            <summary>
            Defines the Music Client Command base class
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Internal.ApiMethod">
            <summary>
            Represents a Music Api Method
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.ApiMethod.BuildRequestBody">
            <summary>
            Allows an API method to supply data to be sent in the body of a request
            </summary>
            <returns>The request data - Null by default, override to supply data for an API method</returns>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.ApiMethod.AppendUriPath(System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Appends the uri subpath and parameters specific to this API method
            By default, no path is added, override this to add a uri subpath for a method
            </summary>
            <param name="uri">The base uri</param>
            <param name="pathParams">The API method parameters</param>
        </member>
        <member name="P:Nokia.Music.Phone.Internal.ApiMethod.RequiresCountryCode">
            <summary>
            Gets a value indicating whether the API method requires a country code to be specified.
            API methods require a country code by default. Override this method for calls that do not.
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Internal.ApiMethod.BaseApiUri">
            <summary>
            Gets or sets the base uri for Api requests
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Internal.ApiMethod.RequestId">
            <summary>
            Gets or sets an id representing this request.
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Internal.ApiMethod.HttpMethod">
            <summary>
            Gets the HTTP method used for this request. GET by default
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Internal.ApiMethod.ContentType">
            <summary>
            Gets the content type for this request
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.MusicClientCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.Commands.MusicClientCommand"/> class.
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.MusicClientCommand.Execute">
            <summary>
            Executes the command
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.MusicClientCommand.MusicClientSettings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.MusicClientCommand.RequestHandler">
            <summary>
            Gets or sets the request handler.
            </summary>
            <value>
            The request handler.
            </value>
        </member>
        <member name="T:Nokia.Music.Phone.Commands.MusicClientCommand.JTokenConversionDelegate`1">
            <summary>
            Signifies a method for converting a JToken into a typed object
            </summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="item">The item.</param>
            <returns>A typed object</returns>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.MusicClientCommand`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.Commands.MusicClientCommand`1"/> class.
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.MusicClientCommand`1.Invoke(System.Action{`0})">
            <summary>
            Invoke the command
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.MusicClientCommand`1.CatalogItemResponseHandler``1(Nokia.Music.Phone.Response{Newtonsoft.Json.Linq.JObject},System.String,Nokia.Music.Phone.Commands.MusicClientCommand.JTokenConversionDelegate{``0},System.Action{Nokia.Music.Phone.ListResponse{``0}})">
            <summary>
            Generic response handler for content lists
            </summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="rawResult">The response</param>
            <param name="itemsName">The json list name</param>
            <param name="converter">The object creation method to use</param>
            <param name="callback">The client callback</param>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.MusicClientCommand`1.ItemsPerPage">
            <summary>
            Gets or sets the number of items to fetch.
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.MusicClientCommand`1.StartIndex">
            <summary>
            Gets or sets the zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.MusicClientCommand`1.JsonProcessor">
            <summary>
            Gets a json processor that can parse the response expected by this command.
            By default, a processor for a named item list is returned.
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.MusicClientCommand`1.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>
            The callback.
            </value>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.SearchCatalogCommand`1.InternalSearch``1(System.String,System.String,System.Nullable{Nokia.Music.Phone.Types.Category},System.String,System.String,System.Int32,System.Int32,Nokia.Music.Phone.Commands.MusicClientCommand.JTokenConversionDelegate{``0},System.Action{Nokia.Music.Phone.ListResponse{``0}})">
            <summary>
            Searches for items
            </summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="searchTerm">The search term.</param>
            <param name="genreId">The genre to filter the results by.</param>
            <param name="category">The category to filter the results by.</param>
            <param name="location">The location to filter the results by.</param>
            <param name="maxdistance">The max distance from the location to to filter the results by.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
            <param name="converter">The object creation method to use</param>
            <param name="callback">The callback to use when the API call has completed</param>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.ArtistProductsCommand.AppendUriPath(System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Appends the uri subpath and parameters specific to this API method
            </summary>
            <param name="uri">The base uri</param>
            <param name="pathParams">The API method parameters</param>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.ArtistProductsCommand.Execute">
            <summary>
            Executes the command
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.ArtistProductsCommand.ArtistId">
            <summary>
            Gets or sets the artist id.
            </summary>
            <value>
            The artist id.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.ArtistProductsCommand.Category">
            <summary>
            Gets or sets the category.
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Commands.MixGroupsCommand">
            <summary>
            Gets the Mix Groups available
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.MixGroupsCommand.AppendUriPath(System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Appends the uri subpath and parameters specific to this API method
            </summary>
            <param name="uri">The base uri</param>
            <param name="pathParams">The API method parameters</param>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.MixGroupsCommand.Execute">
            <summary>
            Executes the command
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.MixGroupsCommand.ExclusiveTag">
            <summary>
              Gets or sets the mix group exclusive tag.
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Commands.SearchSuggestionsCommand">
            <summary>
              Gets suggestions for a search term
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.SearchSuggestionsCommand.AppendUriPath(System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Appends the uri subpath and parameters specific to this API method
            </summary>
            <param name="uri">The base uri</param>
            <param name="pathParams">The API method parameters</param>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.SearchSuggestionsCommand.Execute">
            <summary>
            Executes the command
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.SearchSuggestionsCommand.ExtractStringFromJToken(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Extracts a 
            </summary>
            <param name="item">The item.</param>
            <returns>Returns the string value</returns>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.SearchSuggestionsCommand.SearchTerm">
            <summary>
            Gets or sets the search term.
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.SearchSuggestionsCommand.SuggestArtists">
            <summary>
            Gets or sets a value indicating whether to restrict to artist suggestions
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Commands.SimilarArtistsCommand">
            <summary>
            Gets similar artists to the supplied artist
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.SimilarArtistsCommand.AppendUriPath(System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Appends the uri subpath and parameters specific to this API method
            </summary>
            <param name="uri">The base uri</param>
            <param name="pathParams">The API method parameters</param>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.SimilarArtistsCommand.Execute">
            <summary>
            Executes the command
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.SimilarArtistsCommand.ArtistId">
            <summary>
            Gets or sets the artist id.
            </summary>
            <value>
            The artist id.
            </value>
        </member>
        <member name="T:Nokia.Music.Phone.Converters.LocationConverter">
            <summary>
            Converter for using the Location type with Map control
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Converters.LocationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:Nokia.Music.Phone.Converters.LocationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object. This method
            is called only in System.Windows.Data.BindingMode.TwoWay bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The System.Type of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>The value to be passed to the source object.</returns>
        </member>
        <member name="T:Nokia.Music.Phone.CountryResolver">
            <summary>
            The CountryResolver validates a country has availability for the Nokia Music API
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.ICountryResolver">
            <summary>
            Defines the Nokia Music Country Resolver API
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.ICountryResolver.CheckAvailability(System.Action{Nokia.Music.Phone.Response{System.Boolean}},System.String)">
            <summary>
            Validates that the Nokia Music API is available for a country
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="M:Nokia.Music.Phone.CountryResolver.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.CountryResolver"/> class.
            </summary>
            <param name="appId">The AppID obtained from api.developer.nokia.com</param>
            <param name="appCode">The AppCode obtained from api.developer.nokia.com</param>
        </member>
        <member name="M:Nokia.Music.Phone.CountryResolver.#ctor(System.String,System.String,Nokia.Music.Phone.Internal.IApiRequestHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.CountryResolver"/> class.
            </summary>
            <param name="appId">The App ID obtained from api.developer.nokia.com</param>
            <param name="appCode">The App Code obtained from api.developer.nokia.com</param>
            <param name="requestHandler">The request handler.</param>
            <remarks>
            Allows custom requestHandler for testing purposes
            </remarks>
        </member>
        <member name="M:Nokia.Music.Phone.CountryResolver.CheckAvailability(System.Action{Nokia.Music.Phone.Response{System.Boolean}},System.String)">
            <summary>
            Validates that the Nokia Music API is available for a country
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="M:Nokia.Music.Phone.CountryResolver.ValidateCallback(System.Object)">
            <summary>
            Checks that a callback has been set
            </summary>
            <param name="callback">The callback</param>
        </member>
        <member name="M:Nokia.Music.Phone.CountryResolver.ValidateCountryCode(System.String)">
            <summary>
            Validates a country code.
            </summary>
            <param name="countryCode">The country code.</param>
            <returns>A Boolean indicating that the country code is valid</returns>
        </member>
        <member name="P:Nokia.Music.Phone.CountryResolver.RequestHandler">
            <summary>
            Gets the request handler.
            </summary>
            <value>
            The request handler.
            </value>
        </member>
        <member name="T:Nokia.Music.Phone.CountryResolver.CountryResolverSettings">
            <summary>
            Implementation of MusicClientSettings for use with country resolver request
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Internal.IMusicClientSettings">
            <summary>
            Defines the MusicClient Settings
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Internal.IMusicClientSettings.AppId">
            <summary>
            Gets the app id.
            </summary>
            <value>
            The app id.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Internal.IMusicClientSettings.AppCode">
            <summary>
            Gets the app code.
            </summary>
            <value>
            The app code.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Internal.IMusicClientSettings.CountryCode">
            <summary>
            Gets the country code.
            </summary>
            <value>
            The country code.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Internal.IMusicClientSettings.CountryCodeBasedOnRegionInfo">
            <summary>
            Gets a value indicating whether the country code was based on region info.
            </summary>
            <value>
            <c>true</c> if the country code was based on region info; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Nokia.Music.Phone.ApiCredentialsRequiredException">
            <summary>
            Exception when no API key has been supplied
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.NokiaMusicException">
            <summary>
            Generic Nokia Music Exception.
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.NokiaMusicException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.NokiaMusicException"/> class with a specified error message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Nokia.Music.Phone.ApiCredentialsRequiredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.ApiCredentialsRequiredException"/> class.
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.ApiCallFailedException">
            <summary>
            Exception when an API call fails unexpectedly
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.ApiCallFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.ApiCallFailedException"/> class.
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.ApiNotAvailableException">
            <summary>
            Exception when an the API is not available in the current region
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.ApiNotAvailableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.ApiNotAvailableException"/> class.
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.CountryCodeRequiredException">
            <summary>
            Exception when no country has been supplied
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.CountryCodeRequiredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.CountryCodeRequiredException"/> class.
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.InvalidApiCredentialsException">
            <summary>
            Exception when invalid API credentials have been supplied
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.InvalidApiCredentialsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.InvalidApiCredentialsException"/> class.
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.InvalidCountryCodeException">
            <summary>
            Exception when an invalid country code has been supplied
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.InvalidCountryCodeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.InvalidCountryCodeException"/> class.
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Commands.GenresCommand">
            <summary>
            Gets the available genres
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.GenresCommand.AppendUriPath(System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Appends the uri subpath and parameters specific to this API method
            </summary>
            <param name="uri">The base uri</param>
            <param name="pathParams">The API method parameters</param>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.GenresCommand.Execute">
            <summary>
            Executes the command
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.IMusicClient">
            <summary>
            Defines the Nokia Music API
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.SearchArtists(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Artist}},System.String,System.Int32,System.Int32)">
            <summary>
            Searches for an Artist
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="searchTerm">The search term.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetArtistSearchSuggestions(System.Action{Nokia.Music.Phone.ListResponse{System.String}},System.String,System.Int32)">
            <summary>
            Gets artist search suggestions.
            </summary>
            <param name="callback">The callback.</param>
            <param name="searchTerm">The search term.</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetArtistsAroundLocation(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Artist}},System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets artists that originate around a specified location
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="latitude">The latitude to search around</param>
            <param name="longitude">The longitude to search around</param>
            <param name="maxdistance">The max distance (in KM) around the location to search</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetTopArtists(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Artist}},System.Int32,System.Int32)">
            <summary>
            Gets the top artists
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetTopArtistsForGenre(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Artist}},System.String,System.Int32,System.Int32)">
            <summary>
            Gets the top artists for a genre
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="id">The genre to get results for.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetTopArtistsForGenre(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Artist}},Nokia.Music.Phone.Types.Genre,System.Int32,System.Int32)">
            <summary>
            Gets the top artists for a genre
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="genre">The genre to get results for.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetSimilarArtists(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Artist}},System.String,System.Int32,System.Int32)">
            <summary>
            Gets similar artists for an artist.
            </summary>
            <param name="callback">The callback.</param>
            <param name="id">The artist id.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetSimilarArtists(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Artist}},Nokia.Music.Phone.Types.Artist,System.Int32,System.Int32)">
            <summary>
            Gets similar artists for an artist.
            </summary>
            <param name="callback">The callback.</param>
            <param name="artist">The artist.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetArtistProducts(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Product}},System.String,System.Nullable{Nokia.Music.Phone.Types.Category},System.Int32,System.Int32)">
            <summary>
            Gets products by an artist.
            </summary>
            <param name="callback">The callback.</param>
            <param name="id">The artist id.</param>
            <param name="category">The category.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetArtistProducts(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Product}},Nokia.Music.Phone.Types.Artist,System.Nullable{Nokia.Music.Phone.Types.Category},System.Int32,System.Int32)">
            <summary>
            Gets products by an artist.
            </summary>
            <param name="callback">The callback.</param>
            <param name="artist">The artist.</param>
            <param name="category">The category.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetTopProducts(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Product}},Nokia.Music.Phone.Types.Category,System.Int32,System.Int32)">
            <summary>
            Gets a chart
            </summary>
            <param name="callback">The callback.</param>
            <param name="category">The category - only Album and Track charts are available.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetNewReleases(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Product}},Nokia.Music.Phone.Types.Category,System.Int32,System.Int32)">
            <summary>
            Gets a list of new releases
            </summary>
            <param name="callback">The callback.</param>
            <param name="category">The category - only Album and Track lists are available.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetGenres(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Genre}})">
            <summary>
            Gets the available genres
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.Search(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.MusicItem}},System.String,System.Nullable{Nokia.Music.Phone.Types.Category},System.Int32,System.Int32)">
            <summary>
            Searches Nokia Music
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="searchTerm">The search term.</param>
            <param name="category">The category.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetSearchSuggestions(System.Action{Nokia.Music.Phone.ListResponse{System.String}},System.String,System.Int32)">
            <summary>
            Gets search suggestions.
            </summary>
            <param name="callback">The callback.</param>
            <param name="searchTerm">The search term.</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetMixGroups(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.MixGroup}},System.Int32,System.Int32)">
            <summary>
            Gets the Mix Groups available
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetMixGroups(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.MixGroup}},System.String,System.Int32,System.Int32)">
            <summary>
            Gets the Mix Groups available
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="exclusiveTag">The exclusive tag</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetMixes(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Mix}},System.String,System.Int32,System.Int32)">
            <summary>
            Gets the Mixes available in a group
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="id">The mix group id.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetMixes(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Mix}},System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the Mixes available in a group
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="id">The mix group id.</param>
            <param name="exclusiveTag">The exclusive tag.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetMixes(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Mix}},Nokia.Music.Phone.Types.MixGroup,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the Mixes available in a group
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="group">The mix group.</param>
            <param name="exclusiveTag">The exclusive tag.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.IMusicClient.GetMixes(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Mix}},Nokia.Music.Phone.Types.MixGroup,System.Int32,System.Int32)">
            <summary>
            Gets the Mixes available in a group
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="group">The mix group.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="T:Ionic.Crc.CRC32">
            <summary>
            Calculates a 32bit Cyclic Redundancy Checksum (CRC) using the same polynomial
            used by Zip. This type is used internally by DotNetZip; it is generally not used
            directly by applications wishing to create, read, or manipulate zip archive
            files.
            </summary>
        </member>
        <member name="M:Ionic.Crc.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Ionic.Crc.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the
            output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Ionic.Crc.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
            Get the CRC32 for the given (word,byte) combo.  This is a computation
            defined by PKzip.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:Ionic.Crc.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="P:Ionic.Crc.CRC32.TotalBytesRead">
            <summary>
            indicates the total number of bytes read on the CRC stream.
            This is used when writing the ZipDirEntry when compressing files.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="T:Ionic.Crc.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read, 
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when
             reading from a stream, or to calculate a CRC when writing to a
             stream.  The stream should be used to either read, or write, but
             not both.  If you intermix reads and writes, the results are not
             defined.
             </para>
             
             <para>
             This class is intended primarily for use internally by the
             DotNetZip library.
             </para>
             </remarks>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The default constructor.
            </summary>
            <remarks>
            Instances returned from this constructor will leave the underlying stream
            open upon Close().
            </remarks>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            The constructor allows the caller to specify how to handle the underlying
            stream at close.
            </summary>
            <param name="stream">The underlying stream</param>
            <param name="leaveOpen">true to leave the underlying stream 
            open upon close of the CrcCalculatorStream.; false otherwise.</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            A constructor allowing the specification of the length of the stream to read.
            </summary>
            <remarks>
            Instances returned from this constructor will leave the underlying stream open
            upon Close().
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
            A constructor allowing the specification of the length of the stream to
            read, as well as whether to keep the underlying stream open upon Close().
            </summary>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream 
            open upon close of the CrcCalculatorStream.; false otherwise.</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream. 
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not implemented.
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="M:Ionic.Crc.CrcCalculatorStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
             Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
             This is either the total number of bytes read, or the total number of bytes
             written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.Crc">
            <summary>
            Provides the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.LeaveOpen">
            <summary>
            Indicates whether the underlying stream will be left open when the
            CrcCalculatorStream is Closed.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading. 
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.CanSeek">
            <summary>
            Indicates whether the stream supports seeking. 
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing. 
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.Length">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:Ionic.Crc.CrcCalculatorStream.Position">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.DeflateStream">
             <summary>
             A class for compressing and decompressing streams using the Deflate algorithm.
             </summary>
            
             <remarks>
            
             <para>
               The DeflateStream is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see cref="T:System.IO.Stream"/>.  It adds DEFLATE compression or decompression to any
               stream.
             </para>
            
             <para>
               Using this stream, applications can compress or decompress data via stream
               <c>Read</c> and <c>Write</c> operations.  Either compresssion or decompression
               can occur through either reading or writing. The compression format used is
               DEFLATE, which is documented in <see href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
               Compressed Data Format Specification version 1.3.".
             </para>
            
             <para>
               This class is similar to <see cref="T:Ionic.Zlib.ZlibStream"/>, except that
               <c>ZlibStream</c> adds the <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
               1950 - ZLIB</see> framing bytes to a compressed stream when compressing, or
               expects the RFC1950 framing bytes when decompressing. The <c>DeflateStream</c>
               does not.
             </para>
            
             </remarks>
            
             <seealso cref="T:Ionic.Zlib.ZlibStream"/>
             <seealso cref="T:Ionic.Zlib.GZipStream"/>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode)">
             <summary>
               Create a DeflateStream using the specified CompressionMode.
             </summary>
            
             <remarks>
               When mode is <c>CompressionMode.Compress</c>, the DeflateStream will use
               the default compression level. The "captive" stream will be closed when
               the DeflateStream is closed.
             </remarks>
            
             <example>
             This example uses a DeflateStream to compress data from a file, and writes
             the compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel)">
             <summary>
             Create a DeflateStream using the specified CompressionMode and the specified CompressionLevel.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.  The "captive" stream will be closed when the DeflateStream is
               closed.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses a DeflateStream to compress data from a file, and writes
               the compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw,
                                                                  CompressionMode.Compress,
                                                                  CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>DeflateStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified
               <c>CompressionMode</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compression.  Specify true for
               the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               The <c>DeflateStream</c> will use the default compression level.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the
               "captive" stream in other places in this documentation.
             </param>
            
             <param name="mode">
               Indicates whether the <c>DeflateStream</c> will compress or decompress.
             </param>
            
             <param name="leaveOpen">true if the application would like the stream to
             remain open after inflation/deflation.</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify whether
               the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter
               to leave the stream open.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to use a <c>DeflateStream</c> to compress data from
               a file, and store the compressed data into another file.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".deflated"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
            
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".deflated")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                Application code won't call this code directly.  This method may be
                invoked in two distinct scenarios.  If disposing == true, the method
                has been called directly or indirectly by a user's code, for example
                via the public Dispose() method. In this case, both managed and
                unmanaged resources can be referenced and disposed.  If disposing ==
                false, the method has been called by the runtime from inside the
                object finalizer and this method should not reference other objects;
                in that case only unmanaged resources must be referenced or
                disposed.
              </para>
            </remarks>
            <param name="disposing">
              true if the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, providing an uncompressed data stream.
               Then call Read() on that <c>DeflateStream</c>, and the data read will be
               compressed as you read.  If you wish to use the <c>DeflateStream</c> to
               decompress data while reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, providing a readable compressed data
               stream.  Then call Read() on that <c>DeflateStream</c>, and the data read
               will be decompressed as you read.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
            
             </remarks>
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, and a writable output stream.  Then call
               <c>Write()</c> on that <c>DeflateStream</c>, providing uncompressed data
               as input.  The data sent to the output stream will be the compressed form
               of the data written.  If you wish to use the <c>DeflateStream</c> to
               decompress data while writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, and a writable output stream.  Then
               call <c>Write()</c> on that stream, providing previously compressed
               data. The data sent to the output stream will be the decompressed form of
               the data written.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>,
               but not both.
             </para>
            
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using DEFLATE (RFC 1951).
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)">GZipStream.CompressString(string)</seealso>
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressString(System.String)">ZlibStream.CompressString(string)</seealso>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using DEFLATE.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(string)</seealso>
             <seealso cref="M:Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])">GZipStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])">ZlibStream.CompressBuffer(byte[])</seealso>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a single string.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(string)</seealso>
             <seealso cref="M:Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])">GZipStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])">ZlibStream.UncompressString(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing DEFLATE-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a byte array.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])">GZipStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">ZlibStream.UncompressBuffer(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing data that has been compressed with DEFLATE.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
            <remarks> See the ZLIB documentation for the meaning of the flush behavior.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
             <remarks>
               By tweaking this parameter, you may be able to optimize the compression for
               data with particular characteristics.
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:Ionic.Zlib.FlushType">
            <summary>
            Describes how to flush the current deflate operation. 
            </summary>
            <remarks>
            The different FlushType values are useful when using a Deflate in a streaming application.
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.FlushType.None">
            <summary>No flush at all.</summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Partial">
            <summary>Closes the current block, but doesn't flush it to
            the output. Used internally only in hypothetical
            scenarios.  This was supposed to be removed by Zlib, but it is
            still in use in some edge cases. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Sync">
            <summary>
            Use this during compression to specify that all pending output should be
            flushed to the output buffer and the output should be aligned on a byte
            boundary.  You might use this in a streaming communication scenario, so that
            the decompressor can get all input data available so far.  When using this
            with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
            enough output space has been provided before the call.  Flushing will
            degrade compression and so it should be used only when necessary.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Full">
            <summary>
            Use this during compression to specify that all output should be flushed, as
            with <c>FlushType.Sync</c>, but also, the compression state should be reset
            so that decompression can restart from this point if previous compressed
            data has been damaged or if random access is desired.  Using
            <c>FlushType.Full</c> too often can significantly degrade the compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Finish">
            <summary>Signals the end of the compression/decompression stream.</summary>
        </member>
        <member name="T:Ionic.Zlib.GZipStream">
             <summary>
               A class for compressing and decompressing GZIP streams.
             </summary>
             <remarks>
            
             <para>
               The <c>GZipStream</c> is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a
               <see cref="T:System.IO.Stream"/>. It adds GZIP compression or decompression to any
               stream.
             </para>
            
             <para>
               Like the <c>System.IO.Compression.GZipStream</c> in the .NET Base Class Library, the
               <c>Ionic.Zlib.GZipStream</c> can compress while writing, or decompress while
               reading, but not vice versa.  The compression method used is GZIP, which is
               documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC
               1952</see>, "GZIP file format specification version 4.3".</para>
            
             <para>
               A <c>GZipStream</c> can be used to decompress data (through <c>Read()</c>) or
               to compress data (through <c>Write()</c>), but not both.
             </para>
            
             <para>
               If you wish to use the <c>GZipStream</c> to compress data, you must wrap it
               around a write-able stream. As you call <c>Write()</c> on the <c>GZipStream</c>, the
               data will be compressed into the GZIP format.  If you want to decompress data,
               you must wrap the <c>GZipStream</c> around a readable stream that contains an
               IETF RFC 1952-compliant stream.  The data will be decompressed as you call
               <c>Read()</c> on the <c>GZipStream</c>.
             </para>
            
             <para>
               Though the GZIP format allows data from multiple files to be concatenated
               together, this stream handles only a single segment of GZIP format, typically
               representing a single file.
             </para>
            
             <para>
               This class is similar to <see cref="T:Ionic.Zlib.ZlibStream"/> and <see cref="T:Ionic.Zlib.DeflateStream"/>.
               <c>ZlibStream</c> handles RFC1950-compliant streams.  <see cref="T:Ionic.Zlib.DeflateStream"/>
               handles RFC1951-compliant streams. This class handles RFC1952-compliant streams.
             </para>
            
             </remarks>
            
             <seealso cref="T:Ionic.Zlib.DeflateStream"/>
             <seealso cref="T:Ionic.Zlib.ZlibStream"/>
        </member>
        <member name="F:Ionic.Zlib.GZipStream.LastModified">
             <summary>
               The last modified time for the GZIP stream.
             </summary>
            
             <remarks>
               GZIP allows the storage of a last modified time with each GZIP entry.
               When compressing data, you can set this before the first call to
               <c>Write()</c>.  When decompressing, you can retrieve this value any time
               after the first call to <c>Read()</c>.
             </remarks>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>GZipStream</c> will use the
               default compression level.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with
               <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a GZipStream to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As string = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <example>
             This example shows how to use a GZipStream to uncompress a file.
             <code>
             private void GunZipFile(string filename)
             {
                 if (!filename.EndsWith(".gz))
                     throw new ArgumentException("filename");
                 var DecompressedFile = filename.Substring(0,filename.Length-3);
                 byte[] working = new byte[WORKING_BUFFER_SIZE];
                 int n= 1;
                 using (System.IO.Stream input = System.IO.File.OpenRead(filename))
                 {
                     using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                     {
                         using (var output = System.IO.File.Create(DecompressedFile))
                         {
                             while (n !=0)
                             {
                                 n= decompressor.Read(working, 0, working.Length);
                                 if (n > 0)
                                 {
                                     output.Write(working, 0, n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub GunZipFile(ByVal filename as string)
                 If Not (filename.EndsWith(".gz)) Then
                     Throw New ArgumentException("filename")
                 End If
                 Dim DecompressedFile as string = filename.Substring(0,filename.Length-3)
                 Dim working(WORKING_BUFFER_SIZE) as Byte
                 Dim n As Integer = 1
                 Using input As Stream = File.OpenRead(filename)
                     Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)
                         Using output As Stream = File.Create(UncompressedFile)
                             Do
                                 n= decompressor.Read(working, 0, working.Length)
                                 If n > 0 Then
                                     output.Write(working, 0, n)
                                 End IF
                             Loop While (n  > 0)
                         End Using
                     End Using
                 End Using
             End Sub
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
             <remarks>
            
             <para>
               The <c>CompressionMode</c> (Compress or Decompress) also establishes the
               "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A
               <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a <c>GZipStream</c> to compress a file into a .gz file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
                 {
                     using (Stream compressor = new GZipStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
                     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>GZipStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the stream should be left open after Deflation
               or Inflation.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to leave
               the stream open.
             </para>
            
             <para>
               The <see cref="T:Ionic.Zlib.CompressionMode"/> (Compress or Decompress) also
               establishes the "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
               with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             <para>
               The <c>GZipStream</c> will use the default compression level. If you want
               to specify the compression level, see <see cref="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)"/>.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the "captive"
               stream in other places in this documentation.
             </param>
            
             <param name="mode">Indicates whether the GZipStream will compress or decompress.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the base stream to remain open after
               inflation/deflation.
             </param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and the
               specified <c>CompressionLevel</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to
               leave the stream open.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a <c>GZipStream</c> to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As string = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read and decompress data from the source stream.
             </summary>
            
             <remarks>
               With a <c>GZipStream</c>, decompression is done through reading.
             </remarks>
            
             <example>
             <code>
             byte[] working = new byte[WORKING_BUFFER_SIZE];
             using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
             {
                 using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                 {
                     using (var output = System.IO.File.Create(_DecompressedFile))
                     {
                         int n;
                         while ((n= decompressor.Read(working, 0, working.Length)) !=0)
                         {
                             output.Write(working, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
             <param name="buffer">The buffer into which the decompressed data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">irrelevant; it will always throw!</param>
            <param name="origin">irrelevant; it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.SetLength(System.Int64)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">irrelevant; this method will always throw!</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
             <para>
               If you wish to use the <c>GZipStream</c> to compress data while writing,
               you can create a <c>GZipStream</c> with <c>CompressionMode.Compress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that <c>GZipStream</c>,
               providing uncompressed data as input.  The data sent to the output stream
               will be the compressed form of the data written.
             </para>
            
             <para>
               A <c>GZipStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not
               both. Writing implies compression.  Reading implies decompression.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a single string.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing GZIP-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing data that has been compressed with GZip.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Comment">
             <summary>
               The comment on the GZIP stream.
             </summary>
            
             <remarks>
             <para>
               The GZIP format allows for each file to optionally have an associated
               comment stored with the file.  The comment is encoded with the ISO-8859-1
               code page.  To include a comment in a GZIP stream you create, set this
               property before calling <c>Write()</c> for the first time on the
               <c>GZipStream</c>.
             </para>
            
             <para>
               When using <c>GZipStream</c> to decompress, you can retrieve this property
               after the first call to <c>Read()</c>.  If no comment has been set in the
               GZIP bytestream, the Comment property will return <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.FileName">
             <summary>
               The FileName for the GZIP stream.
             </summary>
            
             <remarks>
            
             <para>
               The GZIP format optionally allows each file to have an associated
               filename.  When compressing data (through <c>Write()</c>), set this
               FileName before calling <c>Write()</c> the first time on the <c>GZipStream</c>.
               The actual filename is encoded into the GZIP bytestream with the
               ISO-8859-1 code page, according to RFC 1952. It is the application's
               responsibility to insure that the FileName can be encoded and decoded
               correctly with this code page.
             </para>
            
             <para>
               When decompressing (through <c>Read()</c>), you can retrieve this value
               any time after the first <c>Read()</c>.  In the case where there was no filename
               encoded into the GZIP bytestream, the property will return <c>null</c> (<c>Nothing</c>
               in VB).
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Crc32">
            <summary>
            The CRC on the GZIP stream.
            </summary>
            <remarks>
            This is used for internal error checking. You probably don't need to look at this property.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="M:Ionic.Zlib.Tree.DistanceCode(System.Int32)">
            <summary>
            Map from a distance to a distance code.
            </summary>
            <remarks> 
            No side effects. _dist_code[256] and _dist_code[257] are never used.
            </remarks>
        </member>
        <member name="T:Ionic.Zlib.CompressionLevel">
            <summary>
            The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.None">
            <summary>
            None means that the data will be simply stored, with no change at all.
            If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None
            cannot be opened with the default zip reader. Use a different CompressionLevel.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level0">
            <summary>
            Same as None.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.BestSpeed">
            <summary>
            The fastest but least effective compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level1">
            <summary>
            A synonym for BestSpeed.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level2">
            <summary>
            A little slower, but better, than level 1.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level3">
            <summary>
            A little slower, but better, than level 2.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level4">
            <summary>
            A little slower, but better, than level 3.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level5">
            <summary>
            A little slower than level 4, but with better compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Default">
            <summary>
            The default compression level, with a good balance of speed and compression efficiency.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level6">
            <summary>
            A synonym for Default.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level7">
            <summary>
            Pretty good compression!
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level8">
            <summary>
             Better compression than Level7!
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.BestCompression">
            <summary>
            The "best" compression, where best means greatest reduction in size of the input data stream.
            This is also the slowest compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level9">
            <summary>
            A synonym for BestCompression.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.CompressionStrategy">
            <summary>
            Describes options for how the compression algorithm is executed.  Different strategies
            work better on different sorts of data.  The strategy parameter can affect the compression
            ratio and the speed of compression but not the correctness of the compresssion.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionStrategy.Default">
            <summary>
            The default strategy is probably the best for normal data.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionStrategy.Filtered">
            <summary>
            The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
            filter or predictor.  By this definition, filtered data consists mostly of small
            values with a somewhat random distribution.  In this case, the compression algorithm
            is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
            coding and less string matching; it is a half-step between <c>Default</c> and <c>HuffmanOnly</c>.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionStrategy.HuffmanOnly">
            <summary>
            Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
            string matching.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.CompressionMode">
            <summary>
            An enum to specify the direction of transcoding - whether to compress or decompress.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionMode.Compress">
            <summary>
            Used to specify that the stream should compress the data.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionMode.Decompress">
            <summary>
            Used to specify that the stream should decompress the data.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="s">the message for the exception.</param>
        </member>
        <member name="M:Ionic.Zlib.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Ionic.Zlib.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
             <summary>
               Reads a number of characters from the current source TextReader and writes
               the data to the target array at the specified index.
             </summary>
            
             <param name="sourceTextReader">The source TextReader to read from</param>
             <param name="target">Contains the array of characteres read from the source TextReader.</param>
             <param name="start">The starting index of the target array.</param>
             <param name="count">The maximum number of characters to read from the source TextReader.</param>
            
             <returns>
               The number of characters read. The number will be less than or equal to
               count depending on the data available in the source TextReader. Returns -1
               if the end of the stream is reached.
             </returns>
        </member>
        <member name="T:Ionic.Zlib.Adler">
            <summary>
            Computes an Adler-32 checksum.
            </summary>
            <remarks>
            The Adler checksum is similar to a CRC checksum, but faster to compute, though less
            reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
            is a required part of the "ZLIB" standard.  Applications will almost never need to
            use this class directly.
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.Adler.Adler32(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
              Calculates the Adler32 checksum.
            </summary>
            <remarks>
              <para>
                This is used within ZLIB.  You probably don't need to use this directly.
              </para>
            </remarks>
            <example>
               To compute an Adler32 checksum on a byte array:
             <code>
               var adler = Adler.Adler32(0, null, 0, 0);
               adler = Adler.Adler32(adler, buffer, index, length);
             </code>
            </example>
        </member>
        <member name="T:Ionic.Zlib.ZlibCodec">
             <summary>
             Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
             </summary>
            
             <remarks>
             This class compresses and decompresses data according to the Deflate algorithm
             and optionally, the ZLIB format, as documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
             href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
             </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.CompressLevel">
            <summary>
            The compression level to use in this codec.  Useful only in compression mode.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.WindowBits">
            <summary>
            The number of Window Bits to use.  
            </summary>
            <remarks>
            This gauges the size of the sliding window, and hence the 
            compression effectiveness as well as memory consumption. It's best to just leave this 
            setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
            a 32k window.  
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.Strategy">
            <summary>
            The compression strategy to use.
            </summary>
            <remarks>
            This is only effective in compression.  The theory offered by ZLIB is that different
            strategies could potentially produce significant differences in compression behavior
            for different data sets.  Unfortunately I don't have any good recommendations for how
            to set it differently.  When I tested changing the strategy I got minimally different
            compression performance. It's best to leave this property alone if you don't have a
            good feel for it.  Or, you may want to produce a test harness that runs through the
            different strategy options and evaluates them on different file types. If you do that,
            let me know your results.
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.#ctor(Ionic.Zlib.CompressionMode)">
            <summary>
            Create a ZlibCodec that either compresses or decompresses.
            </summary>
            <param name="mode">
            Indicates whether the codec should compress (deflate) or decompress (inflate).
            </param>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate">
            <summary>
            Initialize the inflation state. 
            </summary>
            <remarks>
            It is not necessary to call this before using the ZlibCodec to inflate data; 
            It is implicitly called when you call the constructor.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to
             govern the handling of RFC1950 header bytes.
             </summary>
            
             <remarks>
             By default, the ZLIB header defined in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
             you want to read a zlib stream you should specify true for
             expectRfc1950Header.  If you have a deflate stream, you will want to specify
             false. It is only necessary to invoke this initializer explicitly if you
             want to specify false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
             pair when reading the stream of data to be inflated.</param>
            
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            Initialize the ZlibCodec for inflation, with the specified number of window bits. 
            </summary>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to govern the handling of
             RFC1950 header bytes. 
             </summary>
            
             <remarks>
             If you want to read a zlib stream you should specify true for
             expectRfc1950Header. In this case, the library will expect to find a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
             GZIP stream, which does not have such a header, you will want to specify
             false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
             the stream of data to be inflated.</param>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.Inflate(Ionic.Zlib.FlushType)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.None);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.Finish);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">The flush to use when inflating.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.SyncInflate">
            <summary>
            I don't know what this does!
            </summary>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate">
            <summary>
            Initialize the ZlibCodec for deflation operation.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the default level of compression.
            </remarks>
            <example>
            <code>
             int bufferSize = 40000;
             byte[] CompressedBytes = new byte[bufferSize];
             byte[] DecompressedBytes = new byte[bufferSize];
             
             ZlibCodec compressor = new ZlibCodec();
             
             compressor.InitializeDeflate(CompressionLevel.Default);
             
             compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
             compressor.NextIn = 0;
             compressor.AvailableBytesIn = compressor.InputBuffer.Length;
             
             compressor.OutputBuffer = CompressedBytes;
             compressor.NextOut = 0;
             compressor.AvailableBytesOut = CompressedBytes.Length;
             
             while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
             {
               compressor.Deflate(FlushType.None);
             }
             
             while (true)
             {
               int rc= compressor.Deflate(FlushType.Finish);
               if (rc == ZlibConstants.Z_STREAM_END) break;
             }
             
             compressor.EndDeflate();
              
            </code>
            </example>
            <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified
            CompressionLevel.  It will emit a ZLIB stream as it compresses.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the explicit flag governing whether to emit an RFC1950 header byte pair.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified CompressionLevel.
            If you want to generate a zlib stream, you should specify true for
            wantRfc1950Header. In this case, the library will emit a ZLIB
            header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
            1950</see>, in the compressed stream.  
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Int32)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the specified number of window bits. 
            </summary>
            <remarks>
            The codec will use the specified number of window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Int32,System.Boolean)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified
             CompressionLevel, the specified number of window bits, and the explicit flag
             governing whether to emit an RFC1950 header byte pair.
             </summary>
            
             <param name="level">The compression level for the codec.</param>
             <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
             <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
             <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.Deflate(Ionic.Zlib.FlushType)">
            <summary>
            Deflate one batch of data.
            </summary>
            <remarks>
            You must have set InputBuffer and OutputBuffer before calling this method.
            </remarks>
            <example>
            <code>
            private void DeflateBuffer(CompressionLevel level)
            {
                int bufferSize = 1024;
                byte[] buffer = new byte[bufferSize];
                ZlibCodec compressor = new ZlibCodec();
            
                Console.WriteLine("\n============================================");
                Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                MemoryStream ms = new MemoryStream();
            
                int rc = compressor.InitializeDeflate(level);
            
                compressor.InputBuffer = UncompressedBytes;
                compressor.NextIn = 0;
                compressor.AvailableBytesIn = UncompressedBytes.Length;
            
                compressor.OutputBuffer = buffer;
            
                // pass 1: deflate 
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.None);
            
                    if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                        throw new Exception("deflating: " + compressor.Message);
            
                    ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                // pass 2: finish and flush
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.Finish);
            
                    if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                        throw new Exception("deflating: " + compressor.Message);
            
                    if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                        ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                compressor.EndDeflate();
            
                ms.Seek(0, SeekOrigin.Begin);
                CompressedBytes = new byte[compressor.TotalBytesOut];
                ms.Read(CompressedBytes, 0, CompressedBytes.Length);
            }
            </code>
            </example>
            <param name="flush">whether to flush all data as you deflate. Generally you will want to 
            use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
            flush everything. 
            </param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.EndDeflate">
            <summary>
            End a deflation session.
            </summary>
            <remarks>
            Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.ResetDeflate">
            <summary>
            Reset a codec for another deflation session.
            </summary>
            <remarks>
            Call this to reset the deflation state.  For example if a thread is deflating
            non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
            block and before the next Deflate(None) of the second block.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.SetDeflateParams(Ionic.Zlib.CompressionLevel,Ionic.Zlib.CompressionStrategy)">
            <summary>
            Set the CompressionStrategy and CompressionLevel for a deflation session.
            </summary>
            <param name="level">the level of compression to use.</param>
            <param name="strategy">the strategy to use for compression.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            Set the dictionary to be used for either Inflation or Deflation.
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="P:Ionic.Zlib.ZlibCodec.Adler32">
            <summary>
            The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WindowBitsMax">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WindowBitsDefault">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WorkingBufferSizeDefault">
            <summary>
            The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WorkingBufferSizeMin">
            <summary>
            The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.ZlibStream">
             <summary>
             Represents a Zlib stream for compression or decompression.
             </summary>
             <remarks>
            
             <para>
             The ZlibStream is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see cref="T:System.IO.Stream"/>.  It adds ZLIB compression or decompression to any
             stream.
             </para>
            
             <para> Using this stream, applications can compress or decompress data via
             stream <c>Read()</c> and <c>Write()</c> operations.  Either compresssion or
             decompression can occur through either reading or writing. The compression
             format used is ZLIB, which is documented in <see href="http://www.ietf.org/rfc/rfc1950.txt">IETF RFC 1950</see>, "ZLIB Compressed
             Data Format Specification version 3.3". This implementation of ZLIB always uses
             DEFLATE as the compression method.  (see <see href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
             Compressed Data Format Specification version 1.3.") </para>
            
             <para>
             The ZLIB format allows for varying compression methods, window sizes, and dictionaries.
             This implementation always uses the DEFLATE compression method, a preset dictionary,
             and 15 window bits by default.
             </para>
            
             <para>
             This class is similar to <see cref="T:Ionic.Zlib.DeflateStream"/>, except that it adds the
             RFC1950 header and trailer bytes to a compressed stream when compressing, or expects
             the RFC1950 header and trailer bytes when decompressing.  It is also similar to the
             <see cref="T:Ionic.Zlib.GZipStream"/>.
             </para>
             </remarks>
             <seealso cref="T:Ionic.Zlib.DeflateStream"/>
             <seealso cref="T:Ionic.Zlib.GZipStream"/>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode)">
             <summary>
             Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c>
               will use the default compression level. The "captive" stream will be
               closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
             This example uses a <c>ZlibStream</c> to compress a file, and writes the
             compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
               The "captive" stream will be closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
               This example uses a <c>ZlibStream</c> to compress data from a file, and writes the
               compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                     Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the captive stream should be left open after
               Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use
               the default compression level.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream
               open.
             </para>
            
             <para>
             See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">The stream which will be read or written. This is called the
             "captive" stream in other places in this documentation.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain
             open after inflation/deflation.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify
               whether the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive
               stream remain open after the deflation or inflation occurs.  By
               default, after <c>Close()</c> is called on the stream, the captive
               stream is also closed. In some cases this is not desired, for example
               if the stream is a <see cref="T:System.IO.MemoryStream"/> that will be
               re-read after compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ZlibStream to compress the data from a file,
             and store the result into another file. The filestream remains open to allow
             additional data to be written to it.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".zlib"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
            
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            
             <param name="leaveOpen">
             true if the application would like the stream to remain open after
             inflation/deflation.
             </param>
            
             <param name="level">
             A tuning knob to trade speed for effectiveness. This parameter is
             effective only when mode is <c>CompressionMode.Compress</c>.
             </param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while reading,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               providing an uncompressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data read will be compressed.  If you wish to
               use the <c>ZlibStream</c> to decompress data while reading, you can create
               a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, providing a
               readable compressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data will be decompressed as it is read.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but
               not both.
             </para>
            
             </remarks>
            
             <param name="buffer">
             The buffer into which the read data should be placed.</param>
            
             <param name="offset">
             the offset within that data array to put the first byte read.</param>
            
             <param name="count">the number of bytes to read.</param>
            
             <returns>the number of bytes read</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
             Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
             </summary>
             <param name="offset">
               The offset to seek to....
               IF THIS METHOD ACTUALLY DID ANYTHING.
             </param>
             <param name="origin">
               The reference specifying how to apply the offset....  IF
               THIS METHOD ACTUALLY DID ANYTHING.
             </param>
            
             <returns>nothing. This method always throws.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">
              The new value for the stream length....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while writing,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               and a writable output stream.  Then call <c>Write()</c> on that
               <c>ZlibStream</c>, providing uncompressed data as input.  The data sent to
               the output stream will be the compressed form of the data written.  If you
               wish to use the <c>ZlibStream</c> to decompress data while writing, you
               can create a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that stream,
               providing previously compressed data. The data sent to the output stream
               will be the decompressed form of the data written.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)"/>
            
             <param name="s">
               A string to compress.  The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
             A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a single string.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            Sorry, though, not sure exactly how to describe all the various settings.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes. The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotSupportedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:Nokia.Music.Phone.Internal.HttpMethod">
            <summary>
            Currently supported HTTP method types
            </summary>
        </member>
        <member name="F:Nokia.Music.Phone.Internal.HttpMethod.Get">
            <summary>
            Represents an HTTP GET
            </summary>
        </member>
        <member name="F:Nokia.Music.Phone.Internal.HttpMethod.Post">
            <summary>
            Represents an HTTP POST
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Internal.IJsonProcessor">
            <summary>
            Provides a common interface for parsing different kinds of lists
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.IJsonProcessor.ParseList``1(Newtonsoft.Json.Linq.JToken,System.String,Nokia.Music.Phone.Commands.MusicClientCommand.JTokenConversionDelegate{``0})">
            <summary>
            Parses a particular type of Json list
            </summary>
            <typeparam name="T">The type being parsed</typeparam>
            <param name="rawJson">The raw json</param>
            <param name="listName">The name of the list if appropriate eg. "items"</param>
            <param name="converter">A delegate that can parse each object of type T</param>
            <returns>A list of type T</returns>
        </member>
        <member name="T:Nokia.Music.Phone.Internal.ApiRequestHandler">
            <summary>
            Implementation of the raw API interface for making requests
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Internal.IApiRequestHandler">
            <summary>
            Defines the raw API interface for making requests
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.IApiRequestHandler.SendRequestAsync(Nokia.Music.Phone.Internal.ApiMethod,Nokia.Music.Phone.Internal.IMusicClientSettings,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Action{Nokia.Music.Phone.Response{Newtonsoft.Json.Linq.JObject}},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Makes the API request
            </summary>
            <param name="method">The method to call.</param>
            <param name="settings">The music client settings.</param>
            <param name="pathParams">The path params.</param>
            <param name="querystringParams">The querystring params.</param>
            <param name="callback">The callback to hit when done.</param>
            <param name="requestHeaders">HTTP headers to add to the request</param>
            <exception cref="T:System.ArgumentNullException">Thrown when no callback is specified</exception>
        </member>
        <member name="P:Nokia.Music.Phone.Internal.IApiRequestHandler.UriBuilder">
            <summary>
            Gets the URI builder that is being used.
            </summary>
            <value>
            The URI builder.
            </value>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.ApiRequestHandler.#ctor(Nokia.Music.Phone.Internal.IApiUriBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.Internal.ApiRequestHandler"/> class.
            </summary>
            <param name="uriBuilder">The URI builder.</param>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.ApiRequestHandler.SendRequestAsync(Nokia.Music.Phone.Internal.ApiMethod,Nokia.Music.Phone.Internal.IMusicClientSettings,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String},System.Action{Nokia.Music.Phone.Response{Newtonsoft.Json.Linq.JObject}},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Makes the API request
            </summary>
            <param name="method">The method to call.</param>
            <param name="settings">The music client settings.</param>
            <param name="pathParams">The path params.</param>
            <param name="querystringParams">The querystring params.</param>
            <param name="callback">The callback to hit when done.</param>
            <param name="requestHeaders">HTTP headers to add to the request</param>
            <exception cref="T:System.ArgumentNullException">Thrown when no callback is specified</exception>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.ApiRequestHandler.DoCallback(System.Action{Nokia.Music.Phone.Response{Newtonsoft.Json.Linq.JObject}},Newtonsoft.Json.Linq.JObject,System.Nullable{System.Net.HttpStatusCode},System.String,System.Exception,System.Guid,System.Uri)">
            <summary>
            Logs the response and makes the callback
            </summary>
            <param name="callback">The callback method</param>
            <param name="json">The json response</param>
            <param name="statusCode">The response status code</param>
            <param name="contentType">The response content type</param>
            <param name="error">An error or null if successful</param>
            <param name="requestId">The unique id of this request</param>
            <param name="uri">The uri requested</param>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.ApiRequestHandler.RequestStreamCallback(System.IAsyncResult)">
            <summary>
            Writes request data to the request stream
            </summary>
            <param name="ar">The async response</param>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.ApiRequestHandler.GetResponseStream(System.Net.WebResponse)">
            <summary>
            Determines whether response is gzipped and decodes if necessary
            </summary>
            <param name="response">The web response</param>
            <returns>The response stream</returns>
        </member>
        <member name="P:Nokia.Music.Phone.Internal.ApiRequestHandler.GzipEnabled">
            <summary>
            Gets or sets a value indicating whether the request should use gzip or not.
            </summary>
            <value>
              <c>True</c> if the request should use gzip; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Internal.ApiRequestHandler.UriBuilder">
            <summary>
            Gets the URI builder that is being used.
            </summary>
            <value>
            The URI builder.
            </value>
        </member>
        <member name="T:Nokia.Music.Phone.Internal.ApiUriBuilder">
            <summary>
            Defines the real Uri Builder
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Internal.IApiUriBuilder">
            <summary>
            Defines the API URI Builder interface
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.IApiUriBuilder.BuildUri(Nokia.Music.Phone.Internal.ApiMethod,Nokia.Music.Phone.Internal.IMusicClientSettings,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Builds an API URI
            </summary>
            <param name="method">The method to call.</param>
            <param name="settings">The client settings.</param>
            <param name="pathParams">The path parameters.</param>
            <param name="querystringParams">The querystring parameters.</param>
            <returns>
            A Uri to call
            </returns>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.ApiUriBuilder.BuildUri(Nokia.Music.Phone.Internal.ApiMethod,Nokia.Music.Phone.Internal.IMusicClientSettings,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Builds an API URI
            </summary>
            <param name="method">The method to call.</param>
            <param name="settings">The music client settings.</param>
            <param name="pathParams">The path parameters.</param>
            <param name="querystringParams">The querystring parameters.</param>
            <returns>
            A Uri to call
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when an unknown method is used</exception>
            <exception cref="T:Nokia.Music.Phone.CountryCodeRequiredException">Thrown when a CountryCode is required but not supplied</exception>
            <exception cref="T:Nokia.Music.Phone.ApiCredentialsRequiredException">Thrown when an API Key has not been supplied</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.ApiUriBuilder.AddAuthorisationParams(System.Text.StringBuilder,Nokia.Music.Phone.Internal.IMusicClientSettings)">
            <summary>
            Adds authorisation parameters to the querystring
            </summary>
            <param name="url">The url being built.</param>
            <param name="settings">The music client settings.</param>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.ApiUriBuilder.AddCountryCode(System.Text.StringBuilder,Nokia.Music.Phone.Internal.ApiMethod,System.String)">
            <summary>
            Validates and adds country code if required
            </summary>
            <param name="url">The url being built</param>
            <param name="method">The method to call.</param>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.ApiUriBuilder.AppendQueryString(System.Text.StringBuilder,Nokia.Music.Phone.Internal.IMusicClientSettings,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Appends the appropriate query string parameters to the url
            </summary>
            <param name="url">The url being built.</param>
            <param name="settings">The music client settings.</param>
            <param name="querystringParams">The querystring parameters.</param>
        </member>
        <member name="T:Nokia.Music.Phone.Internal.NamedItemListJsonProcessor">
            <summary>
            The typical parsing mechanism for json list responses
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.NamedItemListJsonProcessor.ParseList``1(Newtonsoft.Json.Linq.JToken,System.String,Nokia.Music.Phone.Commands.MusicClientCommand.JTokenConversionDelegate{``0})">
            <summary>
            Parses a named json list.
            </summary>
            <typeparam name="T">The type being parsed</typeparam>
            <param name="rawJson">The raw json</param>
            <param name="listName">The name of the list if appropriate eg. "items"</param>
            <param name="converter">A delegate that can parse each object of type T</param>
            <returns>A list of type T</returns>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.StreamExtensions.AsString(System.IO.Stream,System.Text.Encoding)">
            <summary>
              Converts the stream to a string. The stream will be disposed by this operation.
            </summary>
            <param name = "stream">The stream from which to read a string</param>
            <param name = "encoding">The encoding of the stream</param>
            <returns>The string held within the stream</returns>
        </member>
        <member name="T:Nokia.Music.Phone.Internal.TimedRequest">
            <summary>
            Time-out implementation for web requests
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.TimedRequest.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.Internal.TimedRequest"/> class.
            </summary>
            <param name="uri">The uri used in the web request</param>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.TimedRequest.Dispose">
            <summary>
            Stops the timer
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.TimedRequest.BeginGetResponse(System.AsyncCallback,System.Action,System.Object)">
            <summary>
            Makes the request and starts the timer
            </summary>
            <param name="successCallback">The callback if the request is successful</param>
            <param name="timeoutCallback">The callback if the request times-out</param>
            <param name="state">The state object</param>
        </member>
        <member name="M:Nokia.Music.Phone.Internal.TimedRequest.TimeoutReached(System.Object)">
            <summary>
            Aborts the web request when the timeout is reached
            </summary>
            <param name="state">The state object</param>
        </member>
        <member name="P:Nokia.Music.Phone.Internal.TimedRequest.RequestTimeout">
            <summary>
            Gets or sets the request timeout duration in milliseconds
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.ListResponse`1">
            <summary>
            Contains the result or the error if an error occurred.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="T:Nokia.Music.Phone.Response`1">
            <summary>
            Contains the result or the error if an error occurred.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="M:Nokia.Music.Phone.Response`1.#ctor(System.Nullable{System.Net.HttpStatusCode},`0,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.Response`1"/> class.
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="result">The result.</param>
            /// <param name="requestId">The request id</param>
        </member>
        <member name="M:Nokia.Music.Phone.Response`1.#ctor(System.Nullable{System.Net.HttpStatusCode},System.String,`0,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.Response`1"/> class.
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="contentType">The response Content Type.</param>
            <param name="result">The result.</param>
            <param name="requestId">The request id</param>
        </member>
        <member name="M:Nokia.Music.Phone.Response`1.#ctor(System.Nullable{System.Net.HttpStatusCode},System.Exception,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.Response`1"/> class.
            </summary>
            <param name="statusCode">The HTTP Status code</param>
            <param name="error">The error.</param>
            <param name="requestId">The request id.</param>
        </member>
        <member name="P:Nokia.Music.Phone.Response`1.Error">
            <summary>
            Gets the exception if the call was not successful
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Response`1.Result">
            <summary>
            Gets the result if the call was successful
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Response`1.StatusCode">
            <summary>
            Gets or sets the HTTP Status code
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Response`1.RequestId">
            <summary>
            Gets or sets the id of this request
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Response`1.ContentType">
            <summary>
            Gets or sets the HTTP Content Type
            </summary>
            <value>
            The content type.
            </value>
        </member>
        <member name="M:Nokia.Music.Phone.ListResponse`1.#ctor(System.Nullable{System.Net.HttpStatusCode},System.Collections.Generic.List{`0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.ListResponse`1"/> class.
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="result">The result.</param>
            <param name="startIndex">The start index asked for.</param>
            <param name="itemsPerPage">The items per page asked for.</param>
            <param name="totalResults">The total results available.</param>
            <param name="requestId">The request id.</param>
        </member>
        <member name="M:Nokia.Music.Phone.ListResponse`1.#ctor(System.Nullable{System.Net.HttpStatusCode},System.Exception,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.ListResponse`1"/> class.
            </summary>
            <param name="statusCode">The HTTP Status code</param>
            <param name="error">The error.</param>
            <param name="requestId">The request id.</param>
        </member>
        <member name="M:Nokia.Music.Phone.ListResponse`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Nokia.Music.Phone.ListResponse`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Nokia.Music.Phone.ListResponse`1.ItemsPerPage">
            <summary>
            Gets the items per page the API call was asked for.
            </summary>
            <value>
            The items per page.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.ListResponse`1.StartIndex">
            <summary>
            Gets the start index the API call was asked for.
            </summary>
            <value>
            The start index.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.ListResponse`1.TotalResults">
            <summary>
            Gets the total results available.
            </summary>
            <value>
            The total results.
            </value>
        </member>
        <member name="T:Nokia.Music.Phone.Commands.MixesCommand">
            <summary>
              Gets the Mixes available in a group
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.MixesCommand.AppendUriPath(System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Appends the uri subpath and parameters specific to this API method
            </summary>
            <param name="uri">The base uri</param>
            <param name="pathParams">The API method parameters</param>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.MixesCommand.Execute">
            <summary>
            Executes the command
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.MixesCommand.ExclusiveTag">
            <summary>
              Gets or sets the mix group exclusive tag.
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.MixesCommand.MixGroupId">
            <summary>
              Gets or sets the mix group id.
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.MusicClient">
            <summary>
              The Nokia Music API client
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.#ctor(System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Nokia.Music.Phone.MusicClient"/> class,
              using the RegionInfo settings to locate the user.
            </summary>
            <param name="appId"> The App ID obtained from api.developer.nokia.com </param>
            <param name="appCode"> The App Code obtained from api.developer.nokia.com </param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.#ctor(System.String,System.String,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Nokia.Music.Phone.MusicClient"/> class.
            </summary>
            <param name="appId"> The App ID obtained from api.developer.nokia.com </param>
            <param name="appCode"> The App Code obtained from api.developer.nokia.com </param>
            <param name="countryCode"> The country code. </param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.#ctor(System.String,System.String,Nokia.Music.Phone.Internal.IApiRequestHandler)">
            <summary>
              Initializes a new instance of the <see cref="T:Nokia.Music.Phone.MusicClient"/> class.
            </summary>
            <param name="appId"> The App ID obtained from api.developer.nokia.com </param>
            <param name="appCode"> The App Code obtained from api.developer.nokia.com </param>
            <param name="requestHandler"> The request handler. </param>
            <remarks>
              Allows custom requestHandler for testing purposes
            </remarks>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.#ctor(System.String,System.String,System.String,Nokia.Music.Phone.Internal.IApiRequestHandler)">
            <summary>
              Initializes a new instance of the <see cref="T:Nokia.Music.Phone.MusicClient"/> class.
            </summary>
            <param name="appId"> The App ID obtained from api.developer.nokia.com </param>
            <param name="appCode"> The App Code obtained from api.developer.nokia.com </param>
            <param name="countryCode"> The country code. </param>
            <param name="requestHandler"> The request handler. </param>
            <remarks>
              Allows custom requestHandler for testing purposes
            </remarks>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.SearchArtists(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Artist}},System.String,System.Int32,System.Int32)">
            <summary>
            Searches for an Artist
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="searchTerm">The search term.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetArtistSearchSuggestions(System.Action{Nokia.Music.Phone.ListResponse{System.String}},System.String,System.Int32)">
            <summary>
            Gets artist search suggestions.
            </summary>
            <param name="callback">The callback.</param>
            <param name="searchTerm">The search term.</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetArtistsAroundLocation(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Artist}},System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets artists that originate around a specified location
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="latitude">The latitude to search around</param>
            <param name="longitude">The longitude to search around</param>
            <param name="maxdistance">The max distance (in KM) around the location to search</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetTopArtists(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Artist}},System.Int32,System.Int32)">
            <summary>
            Gets the top artists
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetTopArtistsForGenre(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Artist}},System.String,System.Int32,System.Int32)">
            <summary>
            Gets the top artists for a genre
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="id">The genre to get results for.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetTopArtistsForGenre(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Artist}},Nokia.Music.Phone.Types.Genre,System.Int32,System.Int32)">
            <summary>
            Gets the top artists for a genre
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="genre">The genre to get results for.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetSimilarArtists(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Artist}},System.String,System.Int32,System.Int32)">
            <summary>
            Gets similar artists for an artist.
            </summary>
            <param name="callback">The callback.</param>
            <param name="id">The artist id.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetSimilarArtists(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Artist}},Nokia.Music.Phone.Types.Artist,System.Int32,System.Int32)">
            <summary>
            Gets similar artists for an artist.
            </summary>
            <param name="callback">The callback.</param>
            <param name="artist">The artist.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetArtistProducts(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Product}},System.String,System.Nullable{Nokia.Music.Phone.Types.Category},System.Int32,System.Int32)">
            <summary>
            Gets products by an artist.
            </summary>
            <param name="callback">The callback.</param>
            <param name="id">The artist id.</param>
            <param name="category">The category.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetArtistProducts(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Product}},Nokia.Music.Phone.Types.Artist,System.Nullable{Nokia.Music.Phone.Types.Category},System.Int32,System.Int32)">
            <summary>
            Gets products by an artist.
            </summary>
            <param name="callback">The callback.</param>
            <param name="artist">The artist.</param>
            <param name="category">The category.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetTopProducts(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Product}},Nokia.Music.Phone.Types.Category,System.Int32,System.Int32)">
            <summary>
            Gets a chart
            </summary>
            <param name="callback">The callback.</param>
            <param name="category">The category - only Album and Track charts are available.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetNewReleases(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Product}},Nokia.Music.Phone.Types.Category,System.Int32,System.Int32)">
            <summary>
            Gets a list of new releases
            </summary>
            <param name="callback">The callback.</param>
            <param name="category">The category - only Album and Track lists are available.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetGenres(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Genre}})">
            <summary>
            Gets the available genres
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.Search(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.MusicItem}},System.String,System.Nullable{Nokia.Music.Phone.Types.Category},System.Int32,System.Int32)">
            <summary>
            Searches Nokia Music
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="searchTerm">The search term.</param>
            <param name="category">The category.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetSearchSuggestions(System.Action{Nokia.Music.Phone.ListResponse{System.String}},System.String,System.Int32)">
            <summary>
            Gets search suggestions.
            </summary>
            <param name="callback">The callback.</param>
            <param name="searchTerm">The search term.</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetMixGroups(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.MixGroup}},System.Int32,System.Int32)">
            <summary>
            Gets the Mix Groups available
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetMixGroups(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.MixGroup}},System.String,System.Int32,System.Int32)">
            <summary>
            Gets the Mix Groups available
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="exclusiveTag">The exclusive tag</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetMixes(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Mix}},System.String,System.Int32,System.Int32)">
            <summary>
            Gets the Mixes available in a group
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="id">The mix group id.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetMixes(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Mix}},System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the Mixes available in a group
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="id">The mix group id.</param>
            <param name="exclusiveTag">The exclusive tag.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetMixes(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Mix}},Nokia.Music.Phone.Types.MixGroup,System.Int32,System.Int32)">
            <summary>
            Gets the Mixes available in a group
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="group">The mix group.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.GetMixes(System.Action{Nokia.Music.Phone.ListResponse{Nokia.Music.Phone.Types.Mix}},Nokia.Music.Phone.Types.MixGroup,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the Mixes available in a group
            </summary>
            <param name="callback">The callback to use when the API call has completed</param>
            <param name="group">The mix group.</param>
            <param name="exclusiveTag">The exclusive tag.</param>
            <param name="startIndex">The zero-based start index to fetch items from (e.g. to get the second page of 10 items, pass in 10).</param>
            <param name="itemsPerPage">The number of items to fetch.</param>
            <exception cref="T:System.ArgumentNullException">group;group cannot be null</exception>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.Create``1">
            <summary>
            Creates a command to execute
            </summary>
            <typeparam name="TCommand">The type of the command.</typeparam>
            <returns>A Command to call</returns>
        </member>
        <member name="M:Nokia.Music.Phone.MusicClient.ValidateCountryCode(System.String)">
            <summary>
              Validates a country code.
            </summary>
            <param name="countryCode"> The country code. </param>
            <returns> A Boolean indicating that the country code is valid </returns>
        </member>
        <member name="P:Nokia.Music.Phone.MusicClient.RequestTimeout">
            <summary>
            Gets or sets the timeout duration for web requests.
            </summary>
            <value>
            The timeout duration in milliseconds.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.MusicClient.GzipEnabled">
            <summary>
            Gets or sets a value indicating whether the client should use gzip to make a request.
            By default, gzip is enabled
            </summary>
            <value>
              <c>True</c> if the client should use gzip; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.MusicClient.CountryCodeBasedOnRegionInfo">
            <summary>
            Gets a value indicating whether the country code was based on region info.
            </summary>
            <value>
            <c>true</c> if the country code was based on region info; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.MusicClient.AppId">
            <summary>
            Gets the app id.
            </summary>
            <value>
            The app id.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.MusicClient.AppCode">
            <summary>
            Gets the app code.
            </summary>
            <value>
            The app code.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.MusicClient.CountryCode">
            <summary>
            Gets the country code.
            </summary>
            <value>
            The country code.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.MusicClient.RequestHandler">
            <summary>
            Gets the request handler in use for testing purposes.
            </summary>
            <value>
            The request handler.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.MusicClient.BaseApiUri">
            <summary>
            Gets or sets the base API uri
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Commands.NewReleasesCommand">
            <summary>
            Gets a list of new releases
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.NewReleasesCommand.AppendUriPath(System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Appends the uri subpath and parameters specific to this API method
            </summary>
            <param name="uri">The base uri</param>
            <param name="pathParams">The API method parameters</param>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.NewReleasesCommand.Execute">
            <summary>
            Executes the command
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.NewReleasesCommand.Category">
            <summary>
            Gets or sets the category - only Album and Track lists are available.
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Commands.SearchArtistsCommand">
            <summary>
            Searches for an Artist
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.SearchArtistsCommand.Execute">
            <summary>
            Executes the command
            </summary>
            <exception cref="T:System.ArgumentNullException">SearchTerm;A searchTerm must be supplied</exception>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.SearchArtistsCommand.SearchTerm">
            <summary>
            Gets or sets the search term.
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.SearchArtistsCommand.Location">
            <summary>
            Gets or sets the latitude and longitude to search around.
            </summary>
            <value>
            The location.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.SearchArtistsCommand.MaxDistance">
            <summary>
            Gets or sets the max distance to search around the location.
            </summary>
            <value>
            The max distance.
            </value>
        </member>
        <member name="T:Nokia.Music.Phone.Commands.SearchCommand">
            <summary>
            Searches the Nokia Music Catalog
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.SearchCommand.CreateCatalogItemBasedOnCategory(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates an CatalogItem based on it's category field
            </summary>
            <param name="item">The JSON item</param>
            <returns>An CatalogItem</returns>
            <remarks>Internal for testing purposes</remarks>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.SearchCommand.Execute">
            <summary>
            Executes the command
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.SearchCommand.SearchTerm">
            <summary>
            Gets or sets the search term.
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.SearchCommand.Category">
            <summary>
            Gets or sets the category.
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Tasks.LaunchTask">
            <summary>
            Provides a simple way to show Nokia Music
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Tasks.TaskBase">
            <summary>
            Base class for Nokia Music Tasks
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Tasks.TaskBase.Launch(System.Uri,System.Uri)">
            <summary>
            Launches the specified app to app URI if available or shows a web equivalent.
            </summary>
            <param name="appToAppUri">The app to app URI.</param>
            <param name="webFallbackUri">The web fallback URI.</param>
        </member>
        <member name="M:Nokia.Music.Phone.Tasks.LaunchTask.Show">
            <summary>
            Shows Nokia Music
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Tasks.MusicSearchTask">
            <summary>
            Provides a simple way to show Nokia Music Search Results
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Tasks.MusicSearchTask.Show">
            <summary>
            Shows the Search Page in Nokia Music
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Tasks.MusicSearchTask.SearchTerms">
            <summary>
            Gets or sets the search terms.
            </summary>
            <value>
            The search terms.
            </value>
        </member>
        <member name="T:Nokia.Music.Phone.Tasks.PlayMixTask">
            <summary>
            Provides a simple way to play a Nokia Music Mix
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Tasks.PlayMixTask.Show">
            <summary>
            Plays the Mix in Nokia Music
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Tasks.PlayMixTask.ArtistName">
            <summary>
            Gets or sets the Artist Name.
            </summary>
            <value>
            The artist Name.
            </value>
            <remarks>You need to supply a Mix ID or an Artist Name</remarks>
        </member>
        <member name="P:Nokia.Music.Phone.Tasks.PlayMixTask.MixId">
            <summary>
            Gets or sets a Mix ID.
            </summary>
            <value>
            The mix ID.
            </value>
            <remarks>You need to supply a Mix ID or an Artist Name</remarks>
        </member>
        <member name="T:Nokia.Music.Phone.Tasks.ShowArtistTask">
            <summary>
            Provides a simple way to show Nokia Music Artists
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Tasks.ShowArtistTask.Show">
            <summary>
            Shows the Artist Page in Nokia Music
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Tasks.ShowArtistTask.ArtistId">
            <summary>
            Gets or sets the Artist ID.
            </summary>
            <value>
            The artist ID.
            </value>
            <remarks>You need to supply an ID or a name</remarks>
        </member>
        <member name="P:Nokia.Music.Phone.Tasks.ShowArtistTask.ArtistName">
            <summary>
            Gets or sets the Artist Name.
            </summary>
            <value>
            The artist Name.
            </value>
            <remarks>You need to supply an ID or a name</remarks>
        </member>
        <member name="T:Nokia.Music.Phone.Tasks.ShowGigsTask">
            <summary>
            Provides a simple way to show Nokia Music Gigs
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Tasks.ShowGigsTask.Show">
            <summary>
            Shows Gigs in Nokia Music
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Tasks.ShowGigsTask.SearchTerms">
            <summary>
            Gets or sets optional search terms, such as an artist or city.
            </summary>
            <value>
            The search terms.
            </value>
        </member>
        <member name="T:Nokia.Music.Phone.Tasks.ShowMixesTask">
            <summary>
            Provides a simple way to show Nokia Music Mixes
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Tasks.ShowMixesTask.Show">
            <summary>
            Shows Nokia Music Mixes
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Tasks.ShowProductTask">
            <summary>
            Provides a simple way to show Nokia Music Products
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Tasks.ShowProductTask.Show">
            <summary>
            Shows the Product Page in Nokia Music
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Tasks.ShowProductTask.AppId">
            <summary>
            Gets or sets the optional App ID for passing through to Nokia Music.
            </summary>
            <value>
            The app ID.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Tasks.ShowProductTask.ProductId">
            <summary>
            Gets or sets the Product ID.
            </summary>
            <value>
            The product ID.
            </value>
        </member>
        <member name="T:Nokia.Music.Phone.Commands.TopArtistsCommand">
            <summary>
              Gets the top artists for a genre
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.TopArtistsCommand.Execute">
            <summary>
            Executes the command
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Commands.TopArtistsForGenreCommand">
            <summary>
            Gets the top artists for a genre
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.TopArtistsForGenreCommand.Execute">
            <summary>
            Executes the command
            </summary>
            <exception cref="T:System.ArgumentNullException">GenreId;A genre ID must be supplied</exception>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.TopArtistsForGenreCommand.GenreId">
            <summary>
            Gets or sets the genre ID to get results for.
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Commands.TopProductsCommand">
            <summary>
            Gets a chart
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.TopProductsCommand.AppendUriPath(System.Text.StringBuilder,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Appends the uri subpath and parameters specific to this API method
            </summary>
            <param name="uri">The base uri</param>
            <param name="pathParams">The API method parameters</param>
        </member>
        <member name="M:Nokia.Music.Phone.Commands.TopProductsCommand.Execute">
            <summary>
            Executes the command
            </summary>
        </member>
        <member name="P:Nokia.Music.Phone.Commands.TopProductsCommand.Category">
            <summary>
            Gets or sets the category - only Album and Track charts are available.
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Types.Artist">
            <summary>
            Represents a Nokia Music Artist
            </summary>
        </member>
        <member name="T:Nokia.Music.Phone.Types.MusicItem">
            <summary>
            Represents a Nokia Music Catalog Item
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.MusicItem.ExtractThumbs(Newtonsoft.Json.Linq.JToken,System.Uri@,System.Uri@,System.Uri@,System.Uri@)">
            <summary>
            Extracts the thumbnails from JSON.
            </summary>
            <param name="thumbnailsToken">The thumbnails token.</param>
            <param name="square50">The square50 uri.</param>
            <param name="square100">The square100 uri.</param>
            <param name="square200">The square200 uri.</param>
            <param name="square320">The square320 uri.</param>
        </member>
        <member name="P:Nokia.Music.Phone.Types.MusicItem.Id">
            <summary>
            Gets the item id.
            </summary>
            <value>
            The item id.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.MusicItem.Name">
            <summary>
            Gets the item name.
            </summary>
            <value>
            The item name.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.MusicItem.Thumb50Uri">
            <summary>
            Gets the 50x50 thumbnail URI.
            </summary>
            <value>
            The 50x50 thumbnail URI.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.MusicItem.Thumb100Uri">
            <summary>
            Gets the 100x100 thumbnail URI.
            </summary>
            <value>
            The 100x100 thumbnail URI.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.MusicItem.Thumb200Uri">
            <summary>
            Gets the 200x200 thumbnail URI.
            </summary>
            <value>
            The 200x200 thumbnail URI.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.MusicItem.Thumb320Uri">
            <summary>
            Gets the 320x320 thumbnail URI.
            </summary>
            <value>
            The 320x320 thumbnail URI.
            </value>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Artist.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.Types.Artist"/> class.
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Artist.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Artist.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Artist.PlayMix">
            <summary>
            Launches Nokia Music to start a mix for the artist using the PlayMixTask
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Artist.Show">
            <summary>
            Launches Nokia Music to show details for the artist using the ShowArtistTask
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Artist.FromJToken(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates an Artist from a JSON Object
            </summary>
            <param name="item">The item.</param>
            <returns>An Artist object</returns>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Artist.Country">
            <summary>
            Gets the artist's country of origin.
            </summary>
            <value>
            The artist's country of origin.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Artist.Genres">
            <summary>
            Gets the artist's genres.
            </summary>
            <value>
            The artist's genres.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Artist.Origin">
            <summary>
            Gets the artist's origin location where available.
            </summary>
            <value>
            The origin.
            </value>
        </member>
        <member name="T:Nokia.Music.Phone.Types.Category">
            <summary>
            Defines the API item category
            </summary>
        </member>
        <member name="F:Nokia.Music.Phone.Types.Category.Unknown">
            <summary>
            The item is unknown
            </summary>
        </member>
        <member name="F:Nokia.Music.Phone.Types.Category.Artist">
            <summary>
            The item is an Artist
            </summary>
        </member>
        <member name="F:Nokia.Music.Phone.Types.Category.Album">
            <summary>
            The item is an Album
            </summary>
        </member>
        <member name="F:Nokia.Music.Phone.Types.Category.Single">
            <summary>
            The item is a Single
            </summary>
        </member>
        <member name="F:Nokia.Music.Phone.Types.Category.Track">
            <summary>
            The item is a Track
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.CategoryExtensions.ParseCategory(System.String)">
            <summary>
            Parses a Category id into an enumeration
            </summary>
            <param name="category">The string representation of the Category</param>
            <returns>A Category</returns>
            <remarks>Internal for testing purposes</remarks>
        </member>
        <member name="T:Nokia.Music.Phone.Types.Location">
            <summary>
            Represents a Location
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Location.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.Types.Location"/> class.
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Location.ToString">
            <summary>
            Returns a string representation of the location object
            </summary>
            <returns>A string representation of the location object</returns>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Location.Latitude">
            <summary>
            Gets the latitude.
            </summary>
            <value>
            The latitude.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Location.Longitude">
            <summary>
            Gets the longitude.
            </summary>
            <value>
            The longitude.
            </value>
        </member>
        <member name="M:Nokia.Music.Phone.Types.LocationExtensions.ToGeoCoordinate(Nokia.Music.Phone.Types.Location)">
            <summary>
            Turns a Location into a GeoCoordinate
            </summary>
            <param name="location">The location.</param>
            <returns>
            A GeoCoordinate representation
            </returns>
            <remarks>
            Done as an extension to keep the api as portable as possible
            </remarks>
        </member>
        <member name="T:Nokia.Music.Phone.Types.MixGroup">
            <summary>
            Represents a mix group
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.MixGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.Types.MixGroup"/> class.
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.MixGroup.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nokia.Music.Phone.Types.MixGroup.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Nokia.Music.Phone.Types.MixGroup.FromJToken(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates a MixGroup from a JSON Object
            </summary>
            <param name="item">The item.</param>
            <returns>A MixGroup object</returns>
        </member>
        <member name="P:Nokia.Music.Phone.Types.MixGroup.Id">
            <summary>
            Gets the MixGroup id.
            </summary>
            <value>
            The MixGroup id.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.MixGroup.Name">
            <summary>
            Gets the MixGroup name.
            </summary>
            <value>
            The MixGroup name.
            </value>
        </member>
        <member name="T:Nokia.Music.Phone.Types.Price">
            <summary>
            Represents a Nokia Music Price
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Price.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.Types.Price"/> class.
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Price.FromJToken(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates a Price from a JSON Object
            </summary>
            <param name="item">The item.</param>
            <returns>A Price object</returns>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Price.Currency">
            <summary>
            Gets the currency.
            </summary>
            <value>
            The currency.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Price.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:Nokia.Music.Phone.Types.Mix">
            <summary>
            Represents a Mix
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Mix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.Types.Mix"/> class.
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Mix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Mix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Mix.Play">
            <summary>
            Launches Nokia Music to start playback of the mix using the PlayMixTask
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Mix.FromJToken(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates a Mix from a JSON Object
            </summary>
            <param name="item">The item.</param>
            <returns>A Mix object</returns>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Mix.ParentalAdvisory">
            <summary>
            Gets a value indicating whether the mix has a parental advisory warning.
            </summary>
            <value>
              <c>true</c> if parental advisory; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Mix.TrackCount">
            <summary>
            Gets the track count.
            </summary>
            <value>
            The track count.
            </value>
        </member>
        <member name="T:Nokia.Music.Phone.Types.Product">
            <summary>
            Represents a Nokia Music Product, i.e. Album, Single or Track
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Product.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.Types.Product"/> class.
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Product.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Product.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Product.Show">
            <summary>
            Launches Nokia Music to show details about the product using the ShowProductTask
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Product.FromJToken(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates a Product from a JSON Object
            </summary>
            <param name="item">The item.</param>
            <returns>A Product object</returns>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Product.Category">
            <summary>
            Gets the product's category.
            </summary>
            <value>
            The product's category.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Product.Genres">
            <summary>
            Gets the product's genres.
            </summary>
            <value>
            The product's genres.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Product.Performers">
            <summary>
            Gets the product's performers.
            </summary>
            <value>
            The product's performers.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Product.Price">
            <summary>
            Gets the product's price when available to purchase.
            </summary>
            <value>
            The price when available to purchase.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Product.TrackCount">
            <summary>
            Gets the track count for Album or Single products.
            </summary>
            <value>
            The track count.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Product.TakenFrom">
            <summary>
            Gets the Album or Single a Track is from.
            </summary>
            <value>
            The owning Album or Single if appropriate.
            </value>
        </member>
        <member name="T:Nokia.Music.Phone.Types.Genre">
            <summary>
            Represents a Nokia Music Genre
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Genre.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nokia.Music.Phone.Types.Genre"/> class.
            </summary>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Genre.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Genre.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Nokia.Music.Phone.Types.Genre.FromJToken(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Creates a Genre from a JSON Object
            </summary>
            <param name="item">The item.</param>
            <returns>A Genre object</returns>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Genre.Id">
            <summary>
            Gets the genre id.
            </summary>
            <value>
            The genre id.
            </value>
        </member>
        <member name="P:Nokia.Music.Phone.Types.Genre.Name">
            <summary>
            Gets the genre name.
            </summary>
            <value>
            The genre name.
            </value>
        </member>
    </members>
</doc>
